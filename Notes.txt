Let, Var & Const
-------------------

Variables decalred with "var" in javascript are fuction scoped.
Variables decalred with "let & const" are blocked scoped.
We cannot redefine const Variables.

Template String
------------------

Efficient way to build string by concatenation Variables


eg. without template string

let name = "Punya Prashun"; 
console.log("Hello" + name);

eg. with template string

let name = "Punya Prashun"
console.log(`Hello ${name}`);

Template String methods
--------------------------

startsWith() -> it takes a character as parameter and c     hecks the first character, if the passed character matches with first character then returns true otherwise returns false.

endsWith() -> it takes a character as parameter and checks the last character, if the passed character matches with last character then returns true otherwise returns false.

includes() -> it takes a string as parameter and checks if given string is present in the template string or not. if present then returns true otherwise return false.

repeat() -> it takes an integer as a parameter and repeat that template string that number of time and returns the resulant string.

Array Destructuring
-------------------

The Destructuring assigment syntax is a Javascript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.

It gives a way to access the elements without using indexes.

Swapping two numbers
---------------------

Method 1: Using Third variable
Method 2: without Using Third variable
    2.A: Using + and - operators
    2.B: Using * and / operators
    2.C: Using XOR(^) operators

Object Destructuring
-----------------------

The Destructuring assignment syntax is a javascript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables

Fat Arrow Function
------------------

Arrow functions( Also called "Fat arrow functions") are undoubtly one of the more popular features of ES6. They introduced a new way of writing concise functions.

eg. const myfunc = () => {
    console.log("Arrow Function");
}
eg. const sum = (a,b) => a+b;

Default Parameters in ES6
-------------------------

Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed

Rest Parameters
----------------

Rest parameter is an improved way to handle function parameter, allowing us to more easliy handle various input as paramters in a function. The rest parameter sysntax allows us to represent an indefintite number of arguments as an array.

Spread parameter
-----------------

Spread operator allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in variable array where ther is more than 1 values are expected. it allows us the privilege to obtain a list of paramters from an array. Syntax of Spread operator is same as Rest Parameter but it workd completely opposite of it.

Math Object
------------

Math.sign(number) --> It return 1 if given input is positive, -1 if given input is negative and 0 if input is 0.

eg. sign(5.5)   --> 1
sign(0)         --> 0
sign(-0)        --> -0
sign(NaN)       --> NaN
sign("punya")   --> NaN

Math.trunc() --> it return only integer part leaving decimal part.

Note: in the case of positive number floor works the same as trunc but in case of negative number output will be different.

eg. trunc(5.556)    --> 5
    trunc(-5.956)   --> -5

    Math.trunc(-5.9) -->-5
    Math.floor(-5.9) -->-6

// another method
// Math.max() --> Maximum Value
// Math.min() --> Minimum value
// Math.abs() --> Absolute Value
// Math.sqrt() --> Sqaure Root of a number
// Math.pow() --> Base and Power
// Math.log() --> Base e
// Math.log10 --> Base 10

Exponentiation Operator in ES6
------------------------------

The Exponentiation operator (**) raises first operand to the power of the second operand.

x ** y produces the same result as Math.pow(x,y)

Number & Global Method
------------------------

The isFinite() method

The global isFinite() method returns false if the argument is Infinity or NaN.

The isNaN() Method

The global isNaN() method returns true if the argument is NaN. Otherwise it returns false.

The Number.isInteger() method

The Number.isInteger() method returns true if the argument is an integer.


Classes Creation
-----------------

class keyword is used to create a class.
Always add a method named constructor():

--Structure will be like this---
class classname {
    constructor(){

    }
}

eg.
class car{
    constructor(name, year)
    {
        this.name = name;
        this.year = year;
    }
}

In the above code.. Class name car has two properties called name and year.


Note : javascript class is not an object.
It is a template for javascript Objects.

We can create many objects using a class.

The constructor method is called automatically when a new object is created.

Object Creation
---------------

const object_name = new Class_name(parameter);

eg. const mycar1 = new Car("Ford", 2014);
eg. const mycar2 = new Car("Audi", 2019);

Constructor properties & type
-----------------------------
Constructor method is special method:
    It has to have the exact name "constructor".
    It is executed automatically when a new object is created.
    It is used to initialize object properties.

Note : If you don't define a constructor method, javascript will add an empty constructor method.


